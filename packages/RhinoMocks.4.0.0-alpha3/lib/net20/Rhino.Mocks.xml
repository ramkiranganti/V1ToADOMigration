<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhino.Mocks</name>
    </assembly>
    <members>
        <member name="T:Rhino.Mocks.Arg">
            <summary>
            Provides access to create constraints
            against arguments of a mock
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Arg.Is``1(``0)">
            <summary>
            Constraint that argument is equal
            to the given source
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Arg.Text">
            <summary>
            Access to constraints against
            string arguments
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Arg`1">
            <summary>
            Provides access to create constraints
            against arguments of a mock
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rhino.Mocks.Arg`1.Matches(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Provides ability to create complex
            constraints against arguments of a mock
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Arg`1.Matches(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Provides ability to create a constraint
            using an <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            for evaluation
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Arg`1.Out(`0)">
            <summary>
            Add constraint for an "out" argument
            of a mock
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Arg`1.Ref(`0)">
            <summary>
            Add constraint for a "ref" argument of a mock
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Arg`1.Ref(Rhino.Mocks.Constraints.AbstractConstraint,`0)">
            <summary>
            Add constraint for a "ref" argument of a mock
            </summary>
            <param name="constraint"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Arg`1.Is">
            <summary>
            Provides access to create simple
            constraints against arguments of a mock
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Arg`1.List">
            <summary>
            Provides access to create 
            constraints against <see cref="T:System.Collections.ICollection"/>
            arguments of a mock
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.AbstractConstraint">
            <summary>
            Abstract class for constraint evaluation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_BitwiseAnd(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Logical AND operator
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_BitwiseOr(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Logical OR operator
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_LogicalNot(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Logical negation operator
            </summary>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_False(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Definitely false operator
            </summary>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_True(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Definitely true operator
            </summary>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.AbstractConstraint.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.Anything">
            <summary>
            Constraint allowing all values (always
            returns true)
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Anything.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.Anything.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.CollectionCount">
            <summary>
            Constraint allowing the count of a collection
            to be applied to another constraint
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.CollectionCount.#ctor(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.CollectionCount.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.CollectionCount.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.CollectionEqual">
            <summary>
            Constraint comparing items in a collection
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.CollectionEqual.#ctor(System.Collections.ICollection)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.CollectionEqual.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.CollectionEqual.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.Comparison">
            <summary>
            Constraint for IComparable objects
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Comparison.#ctor(System.IComparable,System.Boolean,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
            <param name="largerThan"></param>
            <param name="andEqualTo"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Comparison.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.Comparison.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.Contains">
            <summary>
            Constraint to determine if given string
            can be found in the object
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Contains.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Contains.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.Contains.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.ContainsAll">
            <summary>
            Constraint comparing items in one collection
            exist entirely in another collection
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.ContainsAll.#ctor(System.Collections.ICollection)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.ContainsAll.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.ContainsAll.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.EndsWith">
            <summary>
            Constraint to determine if given string
            can be found at the end of the object
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.EndsWith.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.EndsWith.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.EndsWith.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.IsIn">
            <summary>
            Constraint on the given object is
            found in a collection
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.IsIn.#ctor(System.Object)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.IsIn.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.IsIn.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.KeyedListElement`1">
            <summary>
            Constraint allowing a specific item in
            a generic collection to be applied to 
            another constraint
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.KeyedListElement`1.#ctor(`0,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            constructor
            </summary>
            <param name="key"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.KeyedListElement`1.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.KeyedListElement`1.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.LambdaConstraint">
            <summary>
            Constraint allowing a <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            to be used against objects
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.LambdaConstraint.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            constructor
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.LambdaConstraint.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.LambdaConstraint.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.Like">
            <summary>
            Constraint to determine if object 
            matches the given regular expression
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Like.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Like.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.Like.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.ListElement">
            <summary>
            Constraint allowing a specific item in 
            a collection to be applied to another
            constraint
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.ListElement.#ctor(System.Int32,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            constructor
            </summary>
            <param name="index"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.ListElement.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.ListElement.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.OneOf">
            <summary>
            Constraint to determine if an object
            exists in a collection
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OneOf.#ctor(System.Collections.ICollection)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OneOf.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.OneOf.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.Equal">
            <summary>
            Constraint comparing equality
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Equal.#ctor(System.Object)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Equal.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Equal.CollectionsAreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines if two collections are equal
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.Equal.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.OperatorAnd">
            <summary>
            Logical AND operator over two constraints
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OperatorAnd.#ctor(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OperatorAnd.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.OperatorAnd.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.OperatorNot">
            <summary>
            Logical negate operator on constraint
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OperatorNot.#ctor(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OperatorNot.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.OperatorNot.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.OperatorOr">
            <summary>
            Logical OR operator over two constraints
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OperatorOr.#ctor(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.OperatorOr.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.OperatorOr.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.PredicateConstraint`1">
            <summary>
            Constraint allowing comparison through
            a delegate
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.PredicateConstraint`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            constructor
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.PredicateConstraint`1.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.PredicateConstraint`1.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.Same">
            <summary>
            Constraint to determine if an object
            is the same as another object
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Same.#ctor(System.Object)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.Same.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.Same.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.StartsWith">
            <summary>
            Constraint to determine if given string
            can be found at the start of the object
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.StartsWith.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.StartsWith.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.StartsWith.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Constraints.TypeOf">
            <summary>
            Constraint to determine if the given
            object is an instance of a specific type
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Constraints.TypeOf.#ctor(System.Type)">
            <summary>
            constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Rhino.Mocks.Constraints.TypeOf.Eval(System.Object)">
            <summary>
            Determines if the give object passes
            the constraint
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Constraints.TypeOf.Message">
            <summary>
            Returns the message of the constraint
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Exceptions.ExpectationViolationException">
            <summary>
            An expectation violation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Exceptions.ExpectationViolationException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Rhino.Mocks.Exceptions.ExpectationViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Rhino.Mocks.Expectations.Actuals">
            <summary>
            Contains the actual method and
            arguments made against a mock
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Actuals.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            constructor
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Actuals.HashCode">
            <summary>
            Hash code of the actual call that uniquely
            identifies the call (not the same as GetHashCode())
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Actuals.Method">
            <summary>
            Actual method
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Actuals.Arguments">
            <summary>
            Actual arguments
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.Expectation">
            <summary>
            Access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.#ctor(Rhino.Mocks.Expectations.Range)">
            <summary>
            constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.AddActualCall(Rhino.Mocks.Expectations.Actuals)">
            <summary>
            Increments actual call counter
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.HandledActual(Rhino.Mocks.Expectations.Actuals)">
            <summary>
            Indicates whether this expectation handled the actual method call
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.GetDisplayName(Castle.DynamicProxy.IInvocation)">
            <summary>
            Returns the string representation of the expectation
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.HandleMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles the method
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.MatchesCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks that the given method and arguments
            match the expectation and argument constraints
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.SetExpectedCount(Rhino.Mocks.Expectations.Range)">
            <summary>
            Sets expected call counter
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation.SetReturnValue(System.Object)">
            <summary>
            Sets expected return value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.Type">
            <summary>
            Identifies the type of expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ActualCount">
            <summary>
            The number of times the expectation was actually called
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ExpectedCount">
            <summary>
            The number of times the expectation is expected to be called
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ExpectationMet">
            <summary>
            Indicates whether or not the expectation have been met
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ExpectationSatisfied">
            <summary>
            Indicates whether or not the expectation have been satisfied
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.HasActuals">
            <summary>
            Indicates whether or not actual calls have been made against
            this expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.HasDelegateToIntercept">
            <summary>
            Indicates whether or not a delegate has been set to
            intercept the invocation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.HasDelegateToInvoke">
            <summary>
            Indicates whether or not a delegate has been set against
            this expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.HasReturnValue">
            <summary>
            Indicates whether or not the expectation has a return type
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ReturnValue">
            <summary>
            Return value for the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ReturnType">
            <summary>
            Return type for the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.DelegateToIntercept">
            <summary>
            Delegate to intercept the invocation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.DelegateToInvoke">
            <summary>
            Delegate to invoke when expectation has been called
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.DelegateReturnsValue">
            <summary>
            Indicates the given delegate should replace
            the return value
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ExceptionToThrow">
            <summary>
            Expectation to throw if method is called
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ForceProceed">
            <summary>
            Indicates whether or not the mocked method is executed
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ReturnArguments">
            <summary>
            Collection of "out" and "ref" arguments
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation.ThrowsException">
            <summary>
            Indicates whether or not an exception should be thrown
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.Expectation`1">
            <summary>
            Access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation`1.#ctor(Rhino.Mocks.Expectations.Range)">
            <summary>
            constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Expectation`1.SetReturnValue(System.Object)">
            <summary>
            Sets expected return value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation`1.HasReturnValue">
            <summary>
            Indicates whether or not the expectation has a return type
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation`1.ReturnValue">
            <summary>
            Return value for the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Expectation`1.ReturnType">
            <summary>
            Return type for the expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.ExpectEvent">
            <summary>
            Represents an expectation against an event call.
            Allows access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IEventOptions">
            <summary>
            Access to various options that can
            be applied to expectations for events
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IEventOptions.IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IEventOptions.Throws``1">
            <summary>
            Throw exception of the given type when the property is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IEventOptions.Throws``1(``0)">
            <summary>
            Throw exception of the given type when the property is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.#ctor(Rhino.Mocks.Expectations.Range)">
            <summary>
            constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.GetDisplayName(Castle.DynamicProxy.IInvocation)">
            <summary>
            Returns the string representation of the expectation
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.HandleMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles the call
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.MatchesCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks that the given method and arguments
            match the expectation and argument constraints
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.MatchesCallArguments(System.Object[])">
            <summary>
            Checks that the given arguments match the argument constraints
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.Rhino#Mocks#Interfaces#IEventOptions#IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.Rhino#Mocks#Interfaces#IEventOptions#Throws``1">
            <summary>
            Throw exception of the given type when
            the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectEvent.Rhino#Mocks#Interfaces#IEventOptions#Throws``1(``0)">
            <summary>
            Throw exception of the given type when
            the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectEvent.Arguments">
            <summary>
            Constraints against argument of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectEvent.Method">
            <summary>
            Get Method of the expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.ExpectMethod">
            <summary>
            Represents an expectation against a method call.
            Allows access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IMethodOptions">
            <summary>
            Access to various options that can be applied to a method
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.CallOriginalMethod">
            <summary>
            Call the original method
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.DoInstead(System.Delegate)">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.Intercept(System.Action{Rhino.Mocks.MethodInvocation})">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.OutRef(System.Object[])">
            <summary>
            Set the parameter values for [out] and [ref] parameters
            </summary>
            <param name="parameters"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.Throws``1">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.Throws``1(``0)">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.WhenCalled(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.WhenCalled``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TArg"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.WhenCalled``2(System.Action{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.WhenCalled``3(System.Action{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions.WhenCalled``4(System.Action{``0,``1,``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <typeparam name="TArg4"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMethodOptions.Repeat">
            <summary>
            Access to repeat options on expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.#ctor">
            <summary>
            Constructs a new method expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.#ctor(Rhino.Mocks.Expectations.Range)">
            <summary>
            constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.GetDisplayName(Castle.DynamicProxy.IInvocation)">
            <summary>
            Returns the string representation of the expectation
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.HandleMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles the method
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.MatchesCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks that the given method and arguments
            match the expectation and argument constraints
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.MatchesCallArguments(System.Object[])">
            <summary>
            Checks that the given arguments match the argument constraints
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#CallOriginalMethod">
            <summary>
            Call original method
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#DoInstead(System.Delegate)">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#Intercept(System.Action{Rhino.Mocks.MethodInvocation})">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#OutRef(System.Object[])">
            <summary>
            Set the parameter values for [out] and [ref] parameters
            </summary>
            <param name="parameters"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#Throws``1">
            <summary>
            Throw exception of the given type when
            the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#Throws``1(``0)">
            <summary>
            Throw exception of the given type when
            the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#WhenCalled(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#WhenCalled``1(System.Action{``0})">
             <summary>
            
             </summary>
             <typeparam name="TArg"></typeparam>
             <param name="action"></param>
             <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#WhenCalled``2(System.Action{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#WhenCalled``3(System.Action{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#WhenCalled``4(System.Action{``0,``1,``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <typeparam name="TArg4"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectMethod.Rhino#Mocks#Interfaces#IMethodOptions#Repeat">
            <summary>
            Access to repeat options on expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectMethod.Arguments">
            <summary>
            Constraints against argument of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectMethod.Method">
            <summary>
            Method of the expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.ExpectMethod`1">
            <summary>
            Represents an expectation against a method call.
            Allows access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IMethodOptions`1">
            <summary>
            Access to various options that can be applied to a method
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.CallOriginalMethod">
            <summary>
            Call the original method
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.DoInstead(System.Delegate)">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Intercept(System.Action{Rhino.Mocks.MethodInvocation})">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.OutRef(System.Object[])">
            <summary>
            Set the parameter values for [out] and [ref] parameters
            </summary>
            <param name="parameters"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Return(`0)">
            <summary>
            Define the return value of a method call (non-void)
            </summary>
            <param name="value">Value to return when method is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Returns(System.Func{`0})">
            <summary>
            Define the return value of a method call (non-void)
            </summary>
            <param name="func">Value to return when method is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Throws``1">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Throws``1(``0)">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TArg"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled``2(System.Action{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled``3(System.Action{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled``4(System.Action{``0,``1,``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <typeparam name="TArg4"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMethodOptions`1.Repeat">
            <summary>
            Access to repeat options on expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.#ctor">
            <summary>
            Constructs a new method expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.#ctor(Rhino.Mocks.Expectations.Range)">
            <summary>
            constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.GetDisplayName(Castle.DynamicProxy.IInvocation)">
            <summary>
            Returns the string representation of the expectation
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.HandleMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles the method
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.MatchesCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks that the given method and arguments
            match the expectation and argument constraints
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.MatchesCallArguments(System.Object[])">
            <summary>
            Checks that the given arguments match the argument constraints
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#CallOriginalMethod">
            <summary>
            Call original method
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#DoInstead(System.Delegate)">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#Intercept(System.Action{Rhino.Mocks.MethodInvocation})">
             <summary>
            
             </summary>
             <param name="action"></param>
             <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#OutRef(System.Object[])">
            <summary>
            Set the parameter values for [out] and [ref] parameters
            </summary>
            <param name="parameters"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#Return(`0)">
            <summary>
            Define the return value of a method call (non-void)
            </summary>
            <param name="value">Value to return when method is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#Returns(System.Func{`0})">
            <summary>
            Define the return value of a method call (non-void)
            </summary>
            <param name="func">Value to return when method is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#Throws``1">
            <summary>
            Throw exception of the given type when
            the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#Throws``1(``0)">
            <summary>
            Throw exception of the given type when
            the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#WhenCalled(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#WhenCalled``1(System.Action{``0})">
             <summary>
            
             </summary>
             <typeparam name="TArg"></typeparam>
             <param name="action"></param>
             <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#WhenCalled``2(System.Action{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#WhenCalled``3(System.Action{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#WhenCalled``4(System.Action{``0,``1,``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <typeparam name="TArg4"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectMethod`1.Rhino#Mocks#Interfaces#IMethodOptions{T}#Repeat">
            <summary>
            Access to repeat options on expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectMethod`1.Arguments">
            <summary>
            Constraints against argument of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectMethod`1.Method">
            <summary>
            Method of the expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.ExpectProperty`1">
            <summary>
            Represents an expectation against a property call.
            Allows access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IPropertyOptions`1">
            <summary>
            Access to various options that can
            be applied only to "get" properties
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IPropertyOptions`1.CallOriginalProperty">
            <summary>
            Call the original property
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IPropertyOptions`1.IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IPropertyOptions`1.Return(`0)">
            <summary>
            Define the return value of a property (non write-only)
            </summary>
            <param name="value">Value to return when "get" is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IPropertyOptions`1.Returns(System.Func{`0})">
            <summary>
            Define the return value of a property (non write-only)
            </summary>
            <param name="func">Value to return when "get" is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IPropertyOptions`1.Throws``1">
            <summary>
            Throw exception of the given type when the property is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IPropertyOptions`1.Throws``1(``0)">
            <summary>
            Throw exception of the given type when the property is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.#ctor(Rhino.Mocks.Expectations.Range)">
            <summary>
            constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.GetDisplayName(Castle.DynamicProxy.IInvocation)">
            <summary>
            Returns the string representation of the expectation
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.HandleMethodCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles the call
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.MatchesCall(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks that the given method and arguments
            match the expectation and argument constraints
            </summary>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.MatchesCallArguments(System.Object[])">
            <summary>
            Checks that the given arguments match the argument constraints
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.Rhino#Mocks#Interfaces#IPropertyOptions{T}#CallOriginalProperty">
            <summary>
            Call original property
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.Rhino#Mocks#Interfaces#IPropertyOptions{T}#IgnoreArguments">
            <summary>
            Ignores all arguments removing any existing argument constraints
            </summary>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.Rhino#Mocks#Interfaces#IPropertyOptions{T}#Return(`0)">
            <summary>
            Define the return value of a property (non write-only)
            </summary>
            <param name="value">Value to return when "get" is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.Rhino#Mocks#Interfaces#IPropertyOptions{T}#Returns(System.Func{`0})">
            <summary>
            Define the return value of a property (non write-only)
            </summary>
            <param name="func">Value to return when "get" is called</param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.Rhino#Mocks#Interfaces#IPropertyOptions{T}#Throws``1">
            <summary>
            Throw exception of the given type when the property is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.ExpectProperty`1.Rhino#Mocks#Interfaces#IPropertyOptions{T}#Throws``1(``0)">
            <summary>
            Throw exception of the given type when the property is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectProperty`1.Arguments">
            <summary>
            Constraints against argument of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectProperty`1.MethodGet">
            <summary>
            Get Method of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectProperty`1.MethodSet">
            <summary>
            Set Method of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.ExpectProperty`1.Property">
            <summary>
            Property of the expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.Range">
            <summary>
            Range for expected method calls
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Range.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            constructor
            </summary>
            <param name="minimum"></param>
            <param name="maximum"></param>
        </member>
        <member name="M:Rhino.Mocks.Expectations.Range.ToString">
            <summary>
            Returns the expected range in 
            string form
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Range.Minimum">
            <summary>
            Gets the minimum number of calls
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Expectations.Range.Maximum">
            <summary>
            Gets the maximum number of calls
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Expectations.RepeatOptions">
            <summary>
            Access to repeatable options on expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IRepeatOptions">
            <summary>
            Access to repeatable options
            on expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.Once">
            <summary>
            Expectation will be called once
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.Twice">
            <summary>
            Expectation will be called twice
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.Times(System.Int32)">
            <summary>
            Expectation will be called exactly
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.AtLeast(System.Int32)">
            <summary>
            Expectation will be called at least
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.AtMost(System.Int32)">
            <summary>
            Expectation could be called as many
            times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.Any">
            <summary>
            Expectation may be called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions.Never">
            <summary>
            Expectation will not be called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.#ctor(Rhino.Mocks.Expectations.ExpectMethod)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.Once">
            <summary>
            Expectation will be called once
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.Twice">
            <summary>
            Expectation will be called twice
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.Times(System.Int32)">
            <summary>
            Expectation will be called exactly
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.AtLeast(System.Int32)">
            <summary>
            Expectation will be called at least
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.AtMost(System.Int32)">
            <summary>
            Expectation could be called as many
            times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.Any">
            <summary>
            Expectation may be called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions.Never">
            <summary>
            Expectation will not be called
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Expectations.RepeatOptions`1">
            <summary>
            Access to repeatable options on expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IRepeatOptions`1">
            <summary>
            Access to repeatable options
            on expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.Once">
            <summary>
            Expectation will be called once
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.Twice">
            <summary>
            Expectation will be called twice
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.Times(System.Int32)">
            <summary>
            Expectation will be called exactly
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.AtLeast(System.Int32)">
            <summary>
            Expectation will be called at least
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.AtMost(System.Int32)">
            <summary>
            Expectation could be called as many
            times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.Any">
            <summary>
            Expectation may be called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IRepeatOptions`1.Never">
            <summary>
            Expectation will not be called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.#ctor(Rhino.Mocks.Expectations.ExpectMethod{`0})">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.Once">
            <summary>
            Expectation will be called once
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.Twice">
            <summary>
            Expectation will be called twice
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.Times(System.Int32)">
            <summary>
            Expectation will be called exactly
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.AtLeast(System.Int32)">
            <summary>
            Expectation will be called at least
            as many times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.AtMost(System.Int32)">
            <summary>
            Expectation could be called as many
            times as the given number
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.Any">
            <summary>
            Expectation may be called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Expectations.RepeatOptions`1.Never">
            <summary>
            Expectation will not be called
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Helpers.ArgumentManager">
            <summary>
            Responsible for managing <see cref="T:Rhino.Mocks.Arg`1"/> class
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.Clear">
            <summary>
            Resets the internal state of stored arguments
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.AddArgument(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Adds a constraint for an argument
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.AddOutArgument(System.Object)">
            <summary>
            Adds a constraint for an "out" argument
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.AddRefArgument(Rhino.Mocks.Constraints.AbstractConstraint,System.Object)">
            <summary>
            Adds a constraint for a "ref" argument
            </summary>
            <param name="constraint"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.GetConstraints">
            <summary>
            Returns the constraints for all arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.GetReturnValues">
            <summary>
            Returns the return value for "out" and "ref" arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ArgumentManager.ValidateMethodSignature(System.Reflection.MethodInfo)">
            <summary>
            Validates method parameters against the arguments set
            </summary>
            <param name="method"></param>
        </member>
        <member name="P:Rhino.Mocks.Helpers.ArgumentManager.HasBeenUsed">
            <summary>
            Indicates whether the <see cref="T:Rhino.Mocks.Arg`1"/> class
            has been used
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Helpers.ByRefDummy`1">
            <summary>
            Provides a dummy field for reference parameters
            </summary>
        </member>
        <member name="F:Rhino.Mocks.Helpers.ByRefDummy`1.Dummy">
            <summary>
            Dummy field for compilation to be used
            with 'out' and 'ref' parameters
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Helpers.EventRaiser">
            <summary>
            Container for raising events for a given object
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.EventRaiser.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Rhino.Mocks.Helpers.EventRaiser.Raise(System.Delegate,System.Object[])">
            <summary>
            Invoke the event for the given object
            </summary>
            <param name="subscription"></param>
            <param name="args"></param>
        </member>
        <member name="T:Rhino.Mocks.Helpers.Is">
            <summary>
            Provides access to common constraints
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.GreaterThan(System.IComparable)">
            <summary>
            Constraint that argument is greater than the
            given object
            </summary>
            <param name="objToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.GreaterThanOrEqual(System.IComparable)">
            <summary>
            Constraint that argument is greater than or 
            equal to the given object
            </summary>
            <param name="objToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.LessThan(System.IComparable)">
            <summary>
            Constraint that argument is less than the
            given object
            </summary>
            <param name="objToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.LessThanOrEqual(System.IComparable)">
            <summary>
            Constraint that argument is less than or
            equal to the given object
            </summary>
            <param name="objToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.Equal(System.Object)">
            <summary>
            Constraint that argument is equal to 
            the given object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.NotEqual(System.Object)">
            <summary>
            Constraint that argument is not equal to 
            the given object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.Same(System.Object)">
            <summary>
            Constraint that argument is the same instance
            as the given object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.NotSame(System.Object)">
            <summary>
            Constraint that argument is not the same
            instance as the given object 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.Anything">
            <summary>
            Constraint allowing argument to be any value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.Null">
            <summary>
            Constraint that argument is null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.NotNull">
            <summary>
            Constraint that argument is not null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.TypeOf(System.Type)">
            <summary>
            Constraint that argument is an instance
            of the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.TypeOf``1">
            <summary>
            Constraint that argument is an instance
            of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Is.Matching``1(System.Func{``0,System.Boolean})">
            <summary>
            Constraint that delegate returns true
            given the argument
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Helpers.IsArg`1">
            <summary>
            Provides access to constraints defined in <see cref="T:Rhino.Mocks.Helpers.Is"/>
            to be used in context with the <see cref="T:Rhino.Mocks.Arg`1"/> syntax
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.GreaterThan(System.IComparable)">
            <summary>
            Constraint that argument is greater than
            the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.GreaterThanOrEqual(System.IComparable)">
            <summary>
            Constraint that argument is greater than
            or equal to the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.LessThan(System.IComparable)">
            <summary>
            Constraint that argument is less than
            the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.LessThanOrEqual(System.IComparable)">
            <summary>
            Constraint that argument is less than
            or equal to the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.Equal(System.Object)">
            <summary>
            Constraint that argument is equal
            to the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.NotEqual(System.Object)">
            <summary>
            Constraint that argument is not equal
            to the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.Same(System.Object)">
            <summary>
            Constraint that argument is the 
            same instance of the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.NotSame(System.Object)">
            <summary>
            Constraint that argument is not the 
            same instance of the given source
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.Equals(System.Object)">
            <summary>
            Throws InvalidOperationException.
            "Equal" method should be used instead.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.IsArg`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Helpers.IsArg`1.Anything">
            <summary>
            Constraint allowing argument to be
            any value
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Helpers.IsArg`1.Null">
            <summary>
            Constraint that argument is null
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Helpers.IsArg`1.NotNull">
            <summary>
            Constraint that argument is not null
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Helpers.IsArg`1.TypeOf">
            <summary>
            Constraint that argument is an instance 
            of the specified type
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Helpers.List">
            <summary>
            Provides access to common <see cref="T:System.Collections.ICollection"/> constraints
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.IsIn(System.Object)">
            <summary>
            Constraint that argument contains the given
            object
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.ContainsAll(System.Collections.ICollection)">
            <summary>
            Constraint that argument contains all of the
            items in the given collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.OneOf(System.Collections.ICollection)">
            <summary>
            Constraint that argument is equal to one of 
            the items in the given collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.Equal(System.Collections.ICollection)">
            <summary>
            Constraint that argument is equal to the given
            collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.Count(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Constraint that arguments count passes the
            given constraint
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.Element(System.Int32,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Constraint that the item at the given index
            of the argument passes the given constraint
            </summary>
            <param name="index"></param>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.List.Element``1(``0,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Constraint that the item of the given key
            of the argument passes the given constraint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Helpers.ListArg`1">
            <summary>
            Provides access to constraints defined in <see cref="T:Rhino.Mocks.Helpers.List"/>
            to be used in context with the <see cref="T:Rhino.Mocks.Arg`1"/> syntax
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.IsIn(System.Object)">
            <summary>
            Constraint that argument contains the
            give object
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.ContainsAll(System.Collections.ICollection)">
            <summary>
            Constraint that each item in the argument
            exists in the given collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.OneOf(System.Collections.ICollection)">
            <summary>
            Constraint that argument is equal to one
            of the items in the given collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.Equal(System.Collections.ICollection)">
            <summary>
            Constraint that argument is equal to
            the given collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.Count(Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Constraint that argument count passes
            the given constraint
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.Element(System.Int32,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Constraint that an item in the argument at
            the given index passes the given constraint
            </summary>
            <param name="index"></param>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.Element``1(``0,Rhino.Mocks.Constraints.AbstractConstraint)">
            <summary>
            Constraint that an item in the argument
            matching to the given item passes the given 
            constraint
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.Equals(System.Object)">
            <summary>
            Throws InvalidOperationException.
            "Equal" method should be used instead.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.ListArg`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Helpers.MethodFormatter">
            <summary>
            Helper class to produce a string representation
            of a method
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.MethodFormatter.ToString(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo)">
            <summary>
            Returns a string representation of a method
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.MethodFormatter.ToString(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Func{System.Array,System.Int32,System.String})">
            <summary>
            Returns a string representation of a method providing a 
            callback to format constraints
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.MethodFormatter.ToString(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Returns a string representation of a method and it's
            arguments
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.MethodFormatter.ToString(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[],System.Func{System.Array,System.Int32,System.String})">
            <summary>
            Returns a string representation of a method and it's
            arguments providing a callback to format constraints
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="args"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Helpers.Text">
            <summary>
            Provides access to common string constraints
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Text.StartsWith(System.String)">
            <summary>
            Constraint that argument starts with the
            given value (ordinal)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Text.EndsWith(System.String)">
            <summary>
            Constraint that argument ends with the
            given value (ordinal)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Text.Contains(System.String)">
            <summary>
            Constraint that argument contains the
            given value (ordinal)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.Text.Like(System.String)">
            <summary>
            Constraint that argument matches the
            given regular expression
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Helpers.TextArg">
            <summary>
            Provides access to constraints defined in <see cref="T:Rhino.Mocks.Helpers.List"/>
            to be used in context with the <see cref="T:Rhino.Mocks.Arg"/> syntax
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.#ctor">
            <summary>
            constraint
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.StartsWith(System.String)">
            <summary>
            Constraint that argument starts with the
            given value (ordinal)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.EndsWith(System.String)">
            <summary>
            Constraint that argument ends with the
            given value (ordinal)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.Contains(System.String)">
            <summary>
            Constraint that argument contains the
            given value (ordinal)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.Like(System.String)">
            <summary>
            Constraint that argument matches the
            given regular expression
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.Equals(System.Object)">
            <summary>
            Throws InvalidOperationException.
            "Equal" method should be used instead.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Helpers.TextArg.GetHashCode">
            <summary>
            Serves as a hash function for a particular type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rhino.Mocks.Interceptors.MockInterceptor">
            <summary>
            Interceptor for <see cref="T:Rhino.Mocks.Interfaces.IMockInstance"/>
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interceptors.MockInterceptor.#ctor(Rhino.Mocks.Interfaces.IMockInstance)">
            <summary>
            Constructor
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Rhino.Mocks.Interceptors.MockInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept a method on an instance of
            <see cref="T:Rhino.Mocks.Interfaces.IMockInstance"/>
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Rhino.Mocks.Interceptors.ObjectInterceptor">
            <summary>
            Interceptor for <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interceptors.ObjectInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept a method on <see cref="T:System.Object"/>
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Rhino.Mocks.Interceptors.ProxyInterceptor">
            <summary>
            Interceptor for a proxy
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interceptors.ProxyInterceptor.#ctor(Rhino.Mocks.Interfaces.IMockInstance)">
            <summary>
            Constructor
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Rhino.Mocks.Interceptors.ProxyInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept a method on a proxy object
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IExpectationLogger">
            <summary>
            Logs expectations
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationLogger.LogExpectation(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the given method and arguments
            that was used to create an expectation
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationLogger.LogExpectedMethodCall(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the expected method call
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationLogger.LogUnexpectedMethodCall(Castle.DynamicProxy.IInvocation,System.String)">
            <summary>
            Logs the unexpected method call
            </summary>
            <param name="invocation"></param>
            <param name="message"></param>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IExpectationOptions">
            <summary>
            Access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationOptions.Throws``1">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationOptions.Throws``1(``0)">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IExpectationOptions`1">
            <summary>
            Access to various options that can be applied to an expectation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationOptions`1.Throws``1">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <returns>Fluid Interface</returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IExpectationOptions`1.Throws``1(``0)">
            <summary>
            Throw exception of the given type when the method is called
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="exception"></param>
            <returns>Fluid Interface</returns>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IMockExpectation">
            <summary>
            An instance of a mocked expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockExpectation.HasReturnValue">
            <summary>
            Indicates whether or not the
            expectation has a return value
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockExpectation.ForceProceed">
            <summary>
            Indicates whether or not the
            mocked method is executed
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockExpectation.Method">
            <summary>
            Method of the expectation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockExpectation.ReturnValue">
            <summary>
            Return value for the expectation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IMockExpectationContainer">
            <summary>
            An instance capable of storing
            expectations
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.GetEventSubscribers(System.String)">
            <summary>
            Returns subscribers that have been added
            for the given event
            </summary>
            <param name="name">event name</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.GetMarkedExpectation">
            <summary>
            Returns the last expectation that has
            been marked for consideration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.ListActuals">
            <summary>
            Returns actual calls that have
            been made
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.ListExpectations">
            <summary>
            Returns all expectations that have
            been set for consideration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.AddExpectation(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Add an expectation without consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.MarkForAssertion(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Set an expectation for consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.MarkForExpectation(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Add an expectation into consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.RemoveExpectation(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Removes the given expectation from
            consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.Interfaces.IMockExpectationContainer.HandleMethodCall(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handle a method call for the underlying
            mocked object
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockExpectationContainer.ExpectationMarked">
            <summary>
            Indicates an expectation has been added
            for consideration
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Interfaces.IMockInstance">
            <summary>
            An instance of a mocked object
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockInstance.HashCode">
            <summary>
            Hash code of the mock instance that uniquely
            identifies the mock (not the same as GetHashCode())
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockInstance.ImplementedTypes">
            <summary>
            Types implemented by the mock instance
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockInstance.IsPartialInstance">
            <summary>
            Indicates whether or not the mock instance
            is a partial mock
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockInstance.ConstructorArguments">
            <summary>
            Arguments for the constructor
            </summary>
        </member>
        <member name="P:Rhino.Mocks.Interfaces.IMockInstance.ProxyInstance">
            <summary>
            Proxy of mocked object
            </summary>
        </member>
        <member name="T:Rhino.Mocks.Loggers.NullLogger">
            <summary>
            Default logger which performs no logging
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Loggers.NullLogger.LogExpectation(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the given method and arguments
            that was used to create an expectation
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.NullLogger.LogExpectedMethodCall(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the expected method call
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.NullLogger.LogUnexpectedMethodCall(Castle.DynamicProxy.IInvocation,System.String)">
            <summary>
            Logs the unexpected method call
            </summary>
            <param name="invocation"></param>
            <param name="message"></param>
        </member>
        <member name="T:Rhino.Mocks.Loggers.TextWriterLogger">
            <summary>
            Logger which writes messages to a Text Writer
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TextWriterLogger.#ctor(System.IO.TextWriter)">
            <summary>
            constructor
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TextWriterLogger.LogExpectation(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the given method and arguments
            that was used to create an expectation
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TextWriterLogger.LogExpectedMethodCall(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the expected method call
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TextWriterLogger.LogUnexpectedMethodCall(Castle.DynamicProxy.IInvocation,System.String)">
            <summary>
            Logs the unexpected method call
            </summary>
            <param name="invocation"></param>
            <param name="message"></param>
        </member>
        <member name="T:Rhino.Mocks.Loggers.TraceWriterLogger">
            <summary>
            Logger which writes messages to <see cref="T:System.Diagnostics.Trace"/>
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TraceWriterLogger.LogExpectation(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the given method and arguments
            that was used to create an expectation
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TraceWriterLogger.LogExpectedMethodCall(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the expected method call
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TraceWriterLogger.LogUnexpectedMethodCall(Castle.DynamicProxy.IInvocation,System.String)">
            <summary>
            Logs the unexpected method call
            </summary>
            <param name="invocation"></param>
            <param name="message"></param>
        </member>
        <member name="T:Rhino.Mocks.Loggers.TraceWriterWithStackTraceLogger">
            <summary>
            Logger which writes messages to <see cref="T:System.Diagnostics.Debug"/>
            and includes the <see cref="T:System.Diagnostics.StackTrace"/>
            </summary>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TraceWriterWithStackTraceLogger.LogExpectation(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the given method and arguments
            that was used to create an expectation
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TraceWriterWithStackTraceLogger.LogExpectedMethodCall(Castle.DynamicProxy.IInvocation)">
            <summary>
            Logs the expected method call
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Rhino.Mocks.Loggers.TraceWriterWithStackTraceLogger.LogUnexpectedMethodCall(Castle.DynamicProxy.IInvocation,System.String)">
            <summary>
            Logs the unexpected method call
            </summary>
            <param name="invocation"></param>
            <param name="message"></param>
        </member>
        <member name="P:Rhino.Mocks.Loggers.TraceWriterWithStackTraceLogger.AlternativeWriter">
            <summary>
            Alternative writer to redirect output to a 
            different location
            </summary>
        </member>
        <member name="T:Rhino.Mocks.MethodInvocation">
            <summary>
            Data structure of the current method invocation
            </summary>
        </member>
        <member name="M:Rhino.Mocks.MethodInvocation.#ctor(Castle.DynamicProxy.IInvocation)">
            <summary>
            constructor
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="P:Rhino.Mocks.MethodInvocation.Arguments">
            <summary>
            Arguments of the current method invocation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MethodInvocation.Method">
            <summary>
            Method of the current method invocation
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MethodInvocation.ReturnValue">
            <summary>
            Gets or sets the return value of the current
            method invocation
            </summary>
        </member>
        <member name="T:Rhino.Mocks.MockInstance">
            <summary>
            An instance of a mocked object
            </summary>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.#ctor(System.Type[])">
            <summary>
            Constructor
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.GetEventSubscribers(System.String)">
            <summary>
            Returns subscribers that have been added
            for the given event
            </summary>
            <param name="name">event name</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.GetMarkedExpectation">
            <summary>
            Returns the last expectation that has
            been marked for consideration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.ListActuals">
            <summary>
            Returns actual calls that have
            been made
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.ListExpectations">
            <summary>
            Returns all expectations that have
            been set for consideration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.AddExpectation(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Add an expectation without consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.MarkForAssertion(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Set an expectation for consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.MarkForExpectation(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Add an expectation into consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.RemoveExpectation(Rhino.Mocks.Expectations.Expectation)">
            <summary>
            Removes the given expectation from
            consideration
            </summary>
            <param name="expectation"></param>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.HandleMethodCall(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handle a method call for the underlying mocked object
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.HandleEventCall(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.HandlePropertyCall(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles a property call
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstance.HandleUnexpectedMethodCall(Castle.DynamicProxy.IInvocation,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Handles an unexpected method call
            </summary>
            <param name="invocation"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.MockInstance.HashCode">
            <summary>
            Hash code of the mock instance that uniquely
            identifies the mock (not the same as GetHashCode())
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MockInstance.ImplementedTypes">
            <summary>
            Types implemented by the mock instance
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MockInstance.IsPartialInstance">
            <summary>
            Indicates whether or not the mock instance
            is a partial mock
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MockInstance.ExpectationMarked">
            <summary>
            Indicates an expectation has been added
            for consideration
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MockInstance.ConstructorArguments">
            <summary>
            Arguments for the constructor
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MockInstance.ProxyInstance">
            <summary>
            Proxy of mocked object
            </summary>
        </member>
        <member name="T:Rhino.Mocks.MockInstanceEquality">
            <summary>
            Generates hash codes for mocked instances and 
            provides methods for comparison between them
            </summary>
        </member>
        <member name="M:Rhino.Mocks.MockInstanceEquality.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.MockInstanceEquality.AreEqual(System.Object,System.Object)">
            <summary>
            Determines if two mock instances are
            equal (same hash code)
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstanceEquality.GetHashCode(System.Object)">
            <summary>
            Gets the mock instance hash code when
            the object is a mock; otherwise returns
            the hash code of the object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Mocks.MockInstanceEquality.Compare(System.Object,System.Object)">
            <summary>
            Compares two mock instances
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Mocks.MockInstanceEquality.Instance">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="P:Rhino.Mocks.MockInstanceEquality.NextHash">
            <summary>
            Returns the next hash code for a mock instance
            </summary>
        </member>
        <member name="T:Rhino.Mocks.MockRepository">
            <summary>
            Repository for mocked objects and expectations.
            </summary>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.#ctor">
            <summary>
            Constructs an instance of the Mock Repository.
            </summary>
            <remarks>
            There is very little reason to instantiate an instance of MockRepository.
            This is intended for internal use only.
            </remarks>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Mock``1">
            <summary>
            Creates a mocked instance of the given type
            </summary>
            <typeparam name="T">the type to mock</typeparam>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Mock``1(System.Object[])">
            <summary>
            Creates a mocked instance of the given type
            </summary>
            <remarks>
            Applicable for Partial mocks
            </remarks>
            <typeparam name="T">the type to mock</typeparam>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Mock``2">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface type
            </summary>
            <typeparam name="T">the type to mock</typeparam>
            <typeparam name="TInterface">the interface implemented by the type</typeparam>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Mock``2(System.Object[])">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface type
            </summary>
            <remarks>
            Applicable for Partial mocks
            </remarks>
            <typeparam name="T">the type to mock</typeparam>
            <typeparam name="TInterface">the interface implemented by the type</typeparam>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Mock``3">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface types
            </summary>
            <typeparam name="T">the type to mock</typeparam>
            <typeparam name="TInterface1">the interface implemented by the type</typeparam>
            <typeparam name="TInterface2">additional interface implemented by the type</typeparam>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Mock``3(System.Object[])">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface types
            </summary>
            <remarks>
            Applicable for Partial mocks
            </remarks>
            <typeparam name="T">the type to mock</typeparam>
            <typeparam name="TInterface1">the interface implemented by the type</typeparam>
            <typeparam name="TInterface2">additional interface implemented by the type</typeparam>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.MockMulti``1(System.Type[],System.Object[])">
            <summary>
            Creates a mocked instance of the given type which implements
            the collection of types
            </summary>
            <remarks>
            Applicable for Partial mocks
            </remarks>
            <typeparam name="T">the type to mock</typeparam>
            <param name="extraTypes">array of types implemented by the type</param>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.MockWithRemoting``1">
            <summary>
            Creates a mocked instance of the given type capable of being used
            for remoting purposes
            </summary>
            <typeparam name="T">the type to mock</typeparam>
            <returns>a remotable mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Partial``1">
            <summary>
            Creates a mocked instance of the given type targeting classes 
            with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Partial``1(System.Object[])">
            <summary>
            Creates a mocked instance of the given type targeting classes
            with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Partial``2">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface targeting classes with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <typeparam name="TInterface">the interface implemented by the type</typeparam>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Partial``2(System.Object[])">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface targeting classes with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <typeparam name="TInterface">the interface implemented by the type</typeparam>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Partial``3">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface types targeting classes with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <typeparam name="TInterface1">the interface implemented by the type</typeparam>
            <typeparam name="TInterface2">additional interface implemented by the type</typeparam>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.Partial``3(System.Object[])">
            <summary>
            Creates a mocked instance of the given type which implements
            the given interface types targeting classes with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <typeparam name="TInterface1">the interface implemented by the type</typeparam>
            <typeparam name="TInterface2">additional interface implemented by the type</typeparam>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="M:Rhino.Mocks.MockRepository.PartialMulti``1(System.Type[],System.Object[])">
            <summary>
            Creates a mocked instance of the given type which implements
            the collection of types targeting classes with abstract or virtual members
            </summary>
            <typeparam name="T">the class to mock</typeparam>
            <param name="extraTypes">array of types implemented by the type</param>
            <param name="arguments">constructor arguments</param>
            <returns>a mocked instance of the given type</returns>
        </member>
        <member name="T:Rhino.Mocks.RepositoryExtensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.AssertWasCalled``1(``0,System.Action{``0})">
            <summary>
            Asserts the given method was called against the mocked object
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the method to assert was called</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">thrown when the method was not called</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.AssertWasCalled``2(``0,System.Func{``0,``1})">
            <summary>
            Asserts the given method was called against the mocked object
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <typeparam name="TResult">the return type of the method</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="func">the method to assert was called</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">thrown when the method was not called</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.AssertWasNotCalled``1(``0,System.Action{``0})">
            <summary>
            Asserts the given method was not called against the mocked object
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the method to assert was called</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">thrown when the method was called</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.AssertWasNotCalled``2(``0,System.Func{``0,``1})">
            <summary>
            Asserts the given method was not called against the mocked object
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <typeparam name="TResult">the return type of the method</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="func">the method to assert was called</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">thrown when the method was called</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.Expect``1(``0,System.Action{``0})">
            <summary>
            Creates an expectation against the mocked object for the given method
            with a return type of void
            </summary>
            <example>
            The following is an example of how to setup an expectation against a method:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{ILoggingService}();
                mock.Expect(x =&gt; x.Log('User saved.');
            }
            </code>
            </example>
            <remarks>
            Applicable for methods with a return type of void
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the method to create the expectation against</param>
            <returns>expectation targeted for methods</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">thrown when the method cannot be resolved</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.Expect``2(``0,System.Func{``0,``1})">
            <summary>
            Creates an expectation against the mocked object for the given method
            with a return type
            </summary>
            <example>
            The following is an example of how to setup an expectation against a method:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{ICustomerService}();
                mock.Expect(x =&gt; x.FindCustomer(1))
                    .Return(new Customer
                    {
                        Id = 1,
                    });
            }
            </code>
            </example>
            <remarks>
            Applicable for methods with a return type
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <typeparam name="TResult">the return type of the method</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="func">the method to create the expectation against</param>
            <returns>expectation targeted for methods</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">thrown when the method cannot be resolved</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.ExpectEvent``1(``0,System.Action{``0})">
            <summary>
            Creates an expectation against the mocked object for an event
            </summary>
            <example>
            The following is an example of how to setup an expectation against an event:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{Page}();
                mock.ExpectEvent(x =&gt; x.OnLoad += null);
            }
            </code>
            </example>
            <remarks>
            Applicable for events only
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the event to create the expectation against</param>
            <returns>expectation targeted for events</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">
            thrown when the event cannot be resolved or the given method is not an event
            </exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.ExpectProperty``2(``0,System.Func{``0,``1})">
            <summary>
            Creates an expectation against the mocked object for a property
            </summary>
            <example>
            The following is an example of how to setup an expectation against a property:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{ICustomer}();
                mock.ExpectPRoperty(x =&gt; x.FirstName);
            }
            </code>
            </example>
            <remarks>
            Applicable for properties only
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <typeparam name="TResult">the return type of the property</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="func">the property to create the expectation against</param>
            <returns>expectation targeted for properties</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">thrown when the property cannot be resolved</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.GetArgumentsForCallsMadeOn``1(``0,System.Action{``0})">
            <summary>
            Returns all of the actual calls made against the given method
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the method to retrieve the calls for</param>
            <returns>collection of the actual calls</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.GetArgumentsForCallsMadeOn``2(``0,System.Func{``0,``1})">
            <summary>
            Returns all of the actual calls made against the given method
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <typeparam name="TResult">the return type of the method</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="func">the method to retrieve the calls for</param>
            <returns>collection of the actual calls</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.Raise``1(``0,System.Action{``0},System.Object[])">
            <summary>
            Provides the ability to raise an event that has had an expectation created
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="eventSubscription">the event that has had an expectation created</param>
            <param name="args">arguments used to the raise event</param>
            <returns>collection of the actual calls</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            thrown when the instance cannot be identified as a mocked object or the given method is not an event
            </exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.Raise``1(``0,System.Action{``0},System.EventArgs)">
            <summary>
            Provides the ability to raise an event that has had an expectation created
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="eventSubscription">the event that has had an expectation created</param>
            <param name="args">event arguments</param>
            <returns>collection of the actual calls</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            thrown when the instance cannot be identified as a mocked object or the given method is not an event
            </exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.Stub``1(``0,System.Action{``0})">
            <summary>
            Creates a stub against the mocked object for the given method with a return type of void
            </summary>
            <example>
            The following is an example of how to setup a stub against a method:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{ILoggingService}();
                mock.Stub(x =&gt; x.Log('User saved.');
            }
            </code>
            </example>
            <remarks>
            Applicable for methods with a return type of void
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the method to create the stub against</param>
            <returns>stub targeted for methods</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">thrown when the method cannot be resolved</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.Stub``2(``0,System.Func{``0,``1})">
            <summary>
            Creates a stub against the mocked object for the given method with a return type
            </summary>
            <example>
            The following is an example of how to setup a stub against a method:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{ICustomerService}();
                mock.Stub(x =&gt; x.FindCustomer(1))
                    .Return(new Customer
                    {
                        Id = 1,
                    });
            }
            </code>
            </example>
            <remarks>
            Applicable for methods with a return type
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <typeparam name="TResult">the return type of the method</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="func">the method to create the stub against</param>
            <returns>stub targeted for methods</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">thrown when the method cannot be resolved</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.StubEvent``1(``0,System.Action{``0})">
            <summary>
            Creates an stub against the mocked object for an event to provide
            the ability to raise the event
            </summary>
            <example>
            The following is an example of how to setup a stub against an event:
            <code>
            [Fact]
            public void Test() {
                var mock = MockRepository.Mock{Page}();
                mock.StubEvent(x =&gt; x.OnLoad += null);
            }
            </code>
            </example>
            <remarks>
            Applicable for events only
            </remarks>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance</param>
            <param name="action">the event to create the stub against</param>
            <returns>stub targeted for events</returns>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
            <exception cref="T:System.InvalidOperationException">
            thrown when the event cannot be resolved or the given method is not an event
            </exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.VerifyAllExpectations``1(``0)">
            <summary>
            Verifies expectations have been met for the given mocked object
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance to verify</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">thrown when expectations have not been met</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.VerifyExpectations``1(``0)">
            <summary>
            Verifies expectations have been met for the given mocked object
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance to verify</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">thrown when expectations have not been met</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="M:Rhino.Mocks.RepositoryExtensions.VerifyExpectations``1(``0,System.Boolean)">
            <summary>
            Verifies expectations have been met for the given mocked object.
            When strictly is "true" then methods called without an expectation will fail verification
            </summary>
            <typeparam name="T">the mocked type</typeparam>
            <param name="instance">the mocked instance to verify</param>
            <param name="strictly">"true" for strict verification, otherwise normal verification</param>
            <exception cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException">
            thrown when expectations have not been met or (in the case of strict verification)
            if a method was called that was not setup with an expectation
            </exception>
            <exception cref="T:System.ArgumentNullException">thrown when the instance is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the instance cannot be identified as a mocked object</exception>
        </member>
        <member name="T:Rhino.Mocks.RhinoMocks">
            <summary>
            Used for [assembly: InternalsVisibleTo(RhinoMocks.StrongName)]
            Used for [assembly: InternalsVisibleTo(RhinoMocks.NormalName)]
            </summary>
        </member>
        <member name="F:Rhino.Mocks.RhinoMocks.StrongName">
            <summary>
            Strong name for the Dynamic Proxy assemblies. Used for InternalsVisibleTo specification.
            </summary>
        </member>
        <member name="F:Rhino.Mocks.RhinoMocks.NormalName">
            <summary>
            Normal name for dynamic proxy assemblies. Used for InternalsVisibleTo specification.
            </summary>
        </member>
        <member name="F:Rhino.Mocks.RhinoMocks.Logger">
            <summary>
            Logs expected and unexpected method calls as well
            as expectations created against methods
            </summary>
        </member>
        <member name="T:__ProtectAttribute">
            <summary>
            This attribute is here so we can get better Pex integration
            Using this means that Pex will not try to inspect the work of 
            the actual proxies being generated by Rhino Mocks
            </summary>
        </member>
    </members>
</doc>
